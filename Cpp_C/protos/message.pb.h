// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/message.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_protos_2fmessage_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_protos_2fmessage_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021012 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include <google/protobuf/timestamp.pb.h>
#include <google/protobuf/any.pb.h>
#include <google/protobuf/duration.pb.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_protos_2fmessage_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_protos_2fmessage_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_protos_2fmessage_2eproto;
namespace protos {
class CommonMessage;
struct CommonMessageDefaultTypeInternal;
extern CommonMessageDefaultTypeInternal _CommonMessage_default_instance_;
class CommonMessage_MyMapEntry_DoNotUse;
struct CommonMessage_MyMapEntry_DoNotUseDefaultTypeInternal;
extern CommonMessage_MyMapEntry_DoNotUseDefaultTypeInternal _CommonMessage_MyMapEntry_DoNotUse_default_instance_;
class InnerMessage;
struct InnerMessageDefaultTypeInternal;
extern InnerMessageDefaultTypeInternal _InnerMessage_default_instance_;
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> ::protos::CommonMessage* Arena::CreateMaybeMessage<::protos::CommonMessage>(Arena*);
template<> ::protos::CommonMessage_MyMapEntry_DoNotUse* Arena::CreateMaybeMessage<::protos::CommonMessage_MyMapEntry_DoNotUse>(Arena*);
template<> ::protos::InnerMessage* Arena::CreateMaybeMessage<::protos::InnerMessage>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace protos {

enum MyEnum : int {
  ENUM_VALUE_1 = 0,
  ENUM_VALUE_2 = 1,
  ENUM_VALUE_3 = 2,
  MyEnum_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  MyEnum_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool MyEnum_IsValid(int value);
constexpr MyEnum MyEnum_MIN = ENUM_VALUE_1;
constexpr MyEnum MyEnum_MAX = ENUM_VALUE_3;
constexpr int MyEnum_ARRAYSIZE = MyEnum_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MyEnum_descriptor();
template<typename T>
inline const std::string& MyEnum_Name(T enum_t_value) {
  static_assert(::std::is_same<T, MyEnum>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function MyEnum_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    MyEnum_descriptor(), enum_t_value);
}
inline bool MyEnum_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, MyEnum* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<MyEnum>(
    MyEnum_descriptor(), name, value);
}
// ===================================================================

class InnerMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.InnerMessage) */ {
 public:
  inline InnerMessage() : InnerMessage(nullptr) {}
  ~InnerMessage() override;
  explicit PROTOBUF_CONSTEXPR InnerMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  InnerMessage(const InnerMessage& from);
  InnerMessage(InnerMessage&& from) noexcept
    : InnerMessage() {
    *this = ::std::move(from);
  }

  inline InnerMessage& operator=(const InnerMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline InnerMessage& operator=(InnerMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InnerMessage& default_instance() {
    return *internal_default_instance();
  }
  static inline const InnerMessage* internal_default_instance() {
    return reinterpret_cast<const InnerMessage*>(
               &_InnerMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(InnerMessage& a, InnerMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(InnerMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InnerMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InnerMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<InnerMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const InnerMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const InnerMessage& from) {
    InnerMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(InnerMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.InnerMessage";
  }
  protected:
  explicit InnerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kInnerValueFieldNumber = 1,
  };
  // int32 inner_value = 1;
  void clear_inner_value();
  int32_t inner_value() const;
  void set_inner_value(int32_t value);
  private:
  int32_t _internal_inner_value() const;
  void _internal_set_inner_value(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:protos.InnerMessage)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    int32_t inner_value_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fmessage_2eproto;
};
// -------------------------------------------------------------------

class CommonMessage_MyMapEntry_DoNotUse : public ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommonMessage_MyMapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> {
public:
  typedef ::PROTOBUF_NAMESPACE_ID::internal::MapEntry<CommonMessage_MyMapEntry_DoNotUse, 
    std::string, int32_t,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> SuperType;
  CommonMessage_MyMapEntry_DoNotUse();
  explicit PROTOBUF_CONSTEXPR CommonMessage_MyMapEntry_DoNotUse(
      ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);
  explicit CommonMessage_MyMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  void MergeFrom(const CommonMessage_MyMapEntry_DoNotUse& other);
  static const CommonMessage_MyMapEntry_DoNotUse* internal_default_instance() { return reinterpret_cast<const CommonMessage_MyMapEntry_DoNotUse*>(&_CommonMessage_MyMapEntry_DoNotUse_default_instance_); }
  static bool ValidateKey(std::string* s) {
    return ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(s->data(), static_cast<int>(s->size()), ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::PARSE, "protos.CommonMessage.MyMapEntry.key");
 }
  static bool ValidateValue(void*) { return true; }
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  friend struct ::TableStruct_protos_2fmessage_2eproto;
};

// -------------------------------------------------------------------

class CommonMessage final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:protos.CommonMessage) */ {
 public:
  inline CommonMessage() : CommonMessage(nullptr) {}
  ~CommonMessage() override;
  explicit PROTOBUF_CONSTEXPR CommonMessage(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  CommonMessage(const CommonMessage& from);
  CommonMessage(CommonMessage&& from) noexcept
    : CommonMessage() {
    *this = ::std::move(from);
  }

  inline CommonMessage& operator=(const CommonMessage& from) {
    CopyFrom(from);
    return *this;
  }
  inline CommonMessage& operator=(CommonMessage&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CommonMessage& default_instance() {
    return *internal_default_instance();
  }
  enum MyFieldCase {
    kMyStringField = 8,
    kMyInt32Field = 9,
    MY_FIELD_NOT_SET = 0,
  };

  static inline const CommonMessage* internal_default_instance() {
    return reinterpret_cast<const CommonMessage*>(
               &_CommonMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(CommonMessage& a, CommonMessage& b) {
    a.Swap(&b);
  }
  inline void Swap(CommonMessage* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CommonMessage* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CommonMessage* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<CommonMessage>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const CommonMessage& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const CommonMessage& from) {
    CommonMessage::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CommonMessage* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "protos.CommonMessage";
  }
  protected:
  explicit CommonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  enum : int {
    kMyNumbersFieldNumber = 6,
    kMyMapFieldNumber = 11,
    kCallStackFieldNumber = 15,
    kMyStringFieldNumber = 1,
    kMyBytesFieldNumber = 10,
    kInnerMessageFieldNumber = 7,
    kMyTimestampFieldNumber = 12,
    kMyAnyFieldNumber = 13,
    kMyDurationFieldNumber = 14,
    kMyInt32FieldNumber = 2,
    kMyFloatFieldNumber = 3,
    kMyBoolFieldNumber = 4,
    kMyEnumFieldNumber = 5,
    kMyStringFieldFieldNumber = 8,
    kMyInt32FieldFieldNumber = 9,
  };
  // repeated int32 my_numbers = 6;
  int my_numbers_size() const;
  private:
  int _internal_my_numbers_size() const;
  public:
  void clear_my_numbers();
  private:
  int32_t _internal_my_numbers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_my_numbers() const;
  void _internal_add_my_numbers(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_my_numbers();
  public:
  int32_t my_numbers(int index) const;
  void set_my_numbers(int index, int32_t value);
  void add_my_numbers(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      my_numbers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_my_numbers();

  // map<string, int32> my_map = 11;
  int my_map_size() const;
  private:
  int _internal_my_map_size() const;
  public:
  void clear_my_map();
  private:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      _internal_my_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      _internal_mutable_my_map();
  public:
  const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
      my_map() const;
  ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
      mutable_my_map();

  // repeated string call_stack = 15;
  int call_stack_size() const;
  private:
  int _internal_call_stack_size() const;
  public:
  void clear_call_stack();
  const std::string& call_stack(int index) const;
  std::string* mutable_call_stack(int index);
  void set_call_stack(int index, const std::string& value);
  void set_call_stack(int index, std::string&& value);
  void set_call_stack(int index, const char* value);
  void set_call_stack(int index, const char* value, size_t size);
  std::string* add_call_stack();
  void add_call_stack(const std::string& value);
  void add_call_stack(std::string&& value);
  void add_call_stack(const char* value);
  void add_call_stack(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& call_stack() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_call_stack();
  private:
  const std::string& _internal_call_stack(int index) const;
  std::string* _internal_add_call_stack();
  public:

  // string my_string = 1;
  void clear_my_string();
  const std::string& my_string() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_my_string(ArgT0&& arg0, ArgT... args);
  std::string* mutable_my_string();
  PROTOBUF_NODISCARD std::string* release_my_string();
  void set_allocated_my_string(std::string* my_string);
  private:
  const std::string& _internal_my_string() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_string(const std::string& value);
  std::string* _internal_mutable_my_string();
  public:

  // bytes my_bytes = 10;
  void clear_my_bytes();
  const std::string& my_bytes() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_my_bytes(ArgT0&& arg0, ArgT... args);
  std::string* mutable_my_bytes();
  PROTOBUF_NODISCARD std::string* release_my_bytes();
  void set_allocated_my_bytes(std::string* my_bytes);
  private:
  const std::string& _internal_my_bytes() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_bytes(const std::string& value);
  std::string* _internal_mutable_my_bytes();
  public:

  // .protos.InnerMessage inner_message = 7;
  bool has_inner_message() const;
  private:
  bool _internal_has_inner_message() const;
  public:
  void clear_inner_message();
  const ::protos::InnerMessage& inner_message() const;
  PROTOBUF_NODISCARD ::protos::InnerMessage* release_inner_message();
  ::protos::InnerMessage* mutable_inner_message();
  void set_allocated_inner_message(::protos::InnerMessage* inner_message);
  private:
  const ::protos::InnerMessage& _internal_inner_message() const;
  ::protos::InnerMessage* _internal_mutable_inner_message();
  public:
  void unsafe_arena_set_allocated_inner_message(
      ::protos::InnerMessage* inner_message);
  ::protos::InnerMessage* unsafe_arena_release_inner_message();

  // .google.protobuf.Timestamp my_timestamp = 12;
  bool has_my_timestamp() const;
  private:
  bool _internal_has_my_timestamp() const;
  public:
  void clear_my_timestamp();
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& my_timestamp() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Timestamp* release_my_timestamp();
  ::PROTOBUF_NAMESPACE_ID::Timestamp* mutable_my_timestamp();
  void set_allocated_my_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* my_timestamp);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Timestamp& _internal_my_timestamp() const;
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _internal_mutable_my_timestamp();
  public:
  void unsafe_arena_set_allocated_my_timestamp(
      ::PROTOBUF_NAMESPACE_ID::Timestamp* my_timestamp);
  ::PROTOBUF_NAMESPACE_ID::Timestamp* unsafe_arena_release_my_timestamp();

  // .google.protobuf.Any my_any = 13;
  bool has_my_any() const;
  private:
  bool _internal_has_my_any() const;
  public:
  void clear_my_any();
  const ::PROTOBUF_NAMESPACE_ID::Any& my_any() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Any* release_my_any();
  ::PROTOBUF_NAMESPACE_ID::Any* mutable_my_any();
  void set_allocated_my_any(::PROTOBUF_NAMESPACE_ID::Any* my_any);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Any& _internal_my_any() const;
  ::PROTOBUF_NAMESPACE_ID::Any* _internal_mutable_my_any();
  public:
  void unsafe_arena_set_allocated_my_any(
      ::PROTOBUF_NAMESPACE_ID::Any* my_any);
  ::PROTOBUF_NAMESPACE_ID::Any* unsafe_arena_release_my_any();

  // .google.protobuf.Duration my_duration = 14;
  bool has_my_duration() const;
  private:
  bool _internal_has_my_duration() const;
  public:
  void clear_my_duration();
  const ::PROTOBUF_NAMESPACE_ID::Duration& my_duration() const;
  PROTOBUF_NODISCARD ::PROTOBUF_NAMESPACE_ID::Duration* release_my_duration();
  ::PROTOBUF_NAMESPACE_ID::Duration* mutable_my_duration();
  void set_allocated_my_duration(::PROTOBUF_NAMESPACE_ID::Duration* my_duration);
  private:
  const ::PROTOBUF_NAMESPACE_ID::Duration& _internal_my_duration() const;
  ::PROTOBUF_NAMESPACE_ID::Duration* _internal_mutable_my_duration();
  public:
  void unsafe_arena_set_allocated_my_duration(
      ::PROTOBUF_NAMESPACE_ID::Duration* my_duration);
  ::PROTOBUF_NAMESPACE_ID::Duration* unsafe_arena_release_my_duration();

  // int32 my_int32 = 2;
  void clear_my_int32();
  int32_t my_int32() const;
  void set_my_int32(int32_t value);
  private:
  int32_t _internal_my_int32() const;
  void _internal_set_my_int32(int32_t value);
  public:

  // float my_float = 3;
  void clear_my_float();
  float my_float() const;
  void set_my_float(float value);
  private:
  float _internal_my_float() const;
  void _internal_set_my_float(float value);
  public:

  // bool my_bool = 4;
  void clear_my_bool();
  bool my_bool() const;
  void set_my_bool(bool value);
  private:
  bool _internal_my_bool() const;
  void _internal_set_my_bool(bool value);
  public:

  // .protos.MyEnum my_enum = 5;
  void clear_my_enum();
  ::protos::MyEnum my_enum() const;
  void set_my_enum(::protos::MyEnum value);
  private:
  ::protos::MyEnum _internal_my_enum() const;
  void _internal_set_my_enum(::protos::MyEnum value);
  public:

  // string my_string_field = 8;
  bool has_my_string_field() const;
  private:
  bool _internal_has_my_string_field() const;
  public:
  void clear_my_string_field();
  const std::string& my_string_field() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_my_string_field(ArgT0&& arg0, ArgT... args);
  std::string* mutable_my_string_field();
  PROTOBUF_NODISCARD std::string* release_my_string_field();
  void set_allocated_my_string_field(std::string* my_string_field);
  private:
  const std::string& _internal_my_string_field() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_my_string_field(const std::string& value);
  std::string* _internal_mutable_my_string_field();
  public:

  // int32 my_int32_field = 9;
  bool has_my_int32_field() const;
  private:
  bool _internal_has_my_int32_field() const;
  public:
  void clear_my_int32_field();
  int32_t my_int32_field() const;
  void set_my_int32_field(int32_t value);
  private:
  int32_t _internal_my_int32_field() const;
  void _internal_set_my_int32_field(int32_t value);
  public:

  void clear_my_field();
  MyFieldCase my_field_case() const;
  // @@protoc_insertion_point(class_scope:protos.CommonMessage)
 private:
  class _Internal;
  void set_has_my_string_field();
  void set_has_my_int32_field();

  inline bool has_my_field() const;
  inline void clear_has_my_field();

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > my_numbers_;
    mutable std::atomic<int> _my_numbers_cached_byte_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::MapField<
        CommonMessage_MyMapEntry_DoNotUse,
        std::string, int32_t,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_STRING,
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::TYPE_INT32> my_map_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> call_stack_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_string_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_bytes_;
    ::protos::InnerMessage* inner_message_;
    ::PROTOBUF_NAMESPACE_ID::Timestamp* my_timestamp_;
    ::PROTOBUF_NAMESPACE_ID::Any* my_any_;
    ::PROTOBUF_NAMESPACE_ID::Duration* my_duration_;
    int32_t my_int32_;
    float my_float_;
    bool my_bool_;
    int my_enum_;
    union MyFieldUnion {
      constexpr MyFieldUnion() : _constinit_{} {}
        ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized _constinit_;
      ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr my_string_field_;
      int32_t my_int32_field_;
    } my_field_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    uint32_t _oneof_case_[1];

  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_protos_2fmessage_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// InnerMessage

// int32 inner_value = 1;
inline void InnerMessage::clear_inner_value() {
  _impl_.inner_value_ = 0;
}
inline int32_t InnerMessage::_internal_inner_value() const {
  return _impl_.inner_value_;
}
inline int32_t InnerMessage::inner_value() const {
  // @@protoc_insertion_point(field_get:protos.InnerMessage.inner_value)
  return _internal_inner_value();
}
inline void InnerMessage::_internal_set_inner_value(int32_t value) {
  
  _impl_.inner_value_ = value;
}
inline void InnerMessage::set_inner_value(int32_t value) {
  _internal_set_inner_value(value);
  // @@protoc_insertion_point(field_set:protos.InnerMessage.inner_value)
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// CommonMessage

// string my_string = 1;
inline void CommonMessage::clear_my_string() {
  _impl_.my_string_.ClearToEmpty();
}
inline const std::string& CommonMessage::my_string() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_string)
  return _internal_my_string();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonMessage::set_my_string(ArgT0&& arg0, ArgT... args) {
 
 _impl_.my_string_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_string)
}
inline std::string* CommonMessage::mutable_my_string() {
  std::string* _s = _internal_mutable_my_string();
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.my_string)
  return _s;
}
inline const std::string& CommonMessage::_internal_my_string() const {
  return _impl_.my_string_.Get();
}
inline void CommonMessage::_internal_set_my_string(const std::string& value) {
  
  _impl_.my_string_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonMessage::_internal_mutable_my_string() {
  
  return _impl_.my_string_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonMessage::release_my_string() {
  // @@protoc_insertion_point(field_release:protos.CommonMessage.my_string)
  return _impl_.my_string_.Release();
}
inline void CommonMessage::set_allocated_my_string(std::string* my_string) {
  if (my_string != nullptr) {
    
  } else {
    
  }
  _impl_.my_string_.SetAllocated(my_string, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.my_string_.IsDefault()) {
    _impl_.my_string_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.CommonMessage.my_string)
}

// int32 my_int32 = 2;
inline void CommonMessage::clear_my_int32() {
  _impl_.my_int32_ = 0;
}
inline int32_t CommonMessage::_internal_my_int32() const {
  return _impl_.my_int32_;
}
inline int32_t CommonMessage::my_int32() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_int32)
  return _internal_my_int32();
}
inline void CommonMessage::_internal_set_my_int32(int32_t value) {
  
  _impl_.my_int32_ = value;
}
inline void CommonMessage::set_my_int32(int32_t value) {
  _internal_set_my_int32(value);
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_int32)
}

// float my_float = 3;
inline void CommonMessage::clear_my_float() {
  _impl_.my_float_ = 0;
}
inline float CommonMessage::_internal_my_float() const {
  return _impl_.my_float_;
}
inline float CommonMessage::my_float() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_float)
  return _internal_my_float();
}
inline void CommonMessage::_internal_set_my_float(float value) {
  
  _impl_.my_float_ = value;
}
inline void CommonMessage::set_my_float(float value) {
  _internal_set_my_float(value);
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_float)
}

// bool my_bool = 4;
inline void CommonMessage::clear_my_bool() {
  _impl_.my_bool_ = false;
}
inline bool CommonMessage::_internal_my_bool() const {
  return _impl_.my_bool_;
}
inline bool CommonMessage::my_bool() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_bool)
  return _internal_my_bool();
}
inline void CommonMessage::_internal_set_my_bool(bool value) {
  
  _impl_.my_bool_ = value;
}
inline void CommonMessage::set_my_bool(bool value) {
  _internal_set_my_bool(value);
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_bool)
}

// .protos.MyEnum my_enum = 5;
inline void CommonMessage::clear_my_enum() {
  _impl_.my_enum_ = 0;
}
inline ::protos::MyEnum CommonMessage::_internal_my_enum() const {
  return static_cast< ::protos::MyEnum >(_impl_.my_enum_);
}
inline ::protos::MyEnum CommonMessage::my_enum() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_enum)
  return _internal_my_enum();
}
inline void CommonMessage::_internal_set_my_enum(::protos::MyEnum value) {
  
  _impl_.my_enum_ = value;
}
inline void CommonMessage::set_my_enum(::protos::MyEnum value) {
  _internal_set_my_enum(value);
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_enum)
}

// repeated int32 my_numbers = 6;
inline int CommonMessage::_internal_my_numbers_size() const {
  return _impl_.my_numbers_.size();
}
inline int CommonMessage::my_numbers_size() const {
  return _internal_my_numbers_size();
}
inline void CommonMessage::clear_my_numbers() {
  _impl_.my_numbers_.Clear();
}
inline int32_t CommonMessage::_internal_my_numbers(int index) const {
  return _impl_.my_numbers_.Get(index);
}
inline int32_t CommonMessage::my_numbers(int index) const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_numbers)
  return _internal_my_numbers(index);
}
inline void CommonMessage::set_my_numbers(int index, int32_t value) {
  _impl_.my_numbers_.Set(index, value);
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_numbers)
}
inline void CommonMessage::_internal_add_my_numbers(int32_t value) {
  _impl_.my_numbers_.Add(value);
}
inline void CommonMessage::add_my_numbers(int32_t value) {
  _internal_add_my_numbers(value);
  // @@protoc_insertion_point(field_add:protos.CommonMessage.my_numbers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CommonMessage::_internal_my_numbers() const {
  return _impl_.my_numbers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
CommonMessage::my_numbers() const {
  // @@protoc_insertion_point(field_list:protos.CommonMessage.my_numbers)
  return _internal_my_numbers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CommonMessage::_internal_mutable_my_numbers() {
  return &_impl_.my_numbers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
CommonMessage::mutable_my_numbers() {
  // @@protoc_insertion_point(field_mutable_list:protos.CommonMessage.my_numbers)
  return _internal_mutable_my_numbers();
}

// .protos.InnerMessage inner_message = 7;
inline bool CommonMessage::_internal_has_inner_message() const {
  return this != internal_default_instance() && _impl_.inner_message_ != nullptr;
}
inline bool CommonMessage::has_inner_message() const {
  return _internal_has_inner_message();
}
inline void CommonMessage::clear_inner_message() {
  if (GetArenaForAllocation() == nullptr && _impl_.inner_message_ != nullptr) {
    delete _impl_.inner_message_;
  }
  _impl_.inner_message_ = nullptr;
}
inline const ::protos::InnerMessage& CommonMessage::_internal_inner_message() const {
  const ::protos::InnerMessage* p = _impl_.inner_message_;
  return p != nullptr ? *p : reinterpret_cast<const ::protos::InnerMessage&>(
      ::protos::_InnerMessage_default_instance_);
}
inline const ::protos::InnerMessage& CommonMessage::inner_message() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.inner_message)
  return _internal_inner_message();
}
inline void CommonMessage::unsafe_arena_set_allocated_inner_message(
    ::protos::InnerMessage* inner_message) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.inner_message_);
  }
  _impl_.inner_message_ = inner_message;
  if (inner_message) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.CommonMessage.inner_message)
}
inline ::protos::InnerMessage* CommonMessage::release_inner_message() {
  
  ::protos::InnerMessage* temp = _impl_.inner_message_;
  _impl_.inner_message_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::protos::InnerMessage* CommonMessage::unsafe_arena_release_inner_message() {
  // @@protoc_insertion_point(field_release:protos.CommonMessage.inner_message)
  
  ::protos::InnerMessage* temp = _impl_.inner_message_;
  _impl_.inner_message_ = nullptr;
  return temp;
}
inline ::protos::InnerMessage* CommonMessage::_internal_mutable_inner_message() {
  
  if (_impl_.inner_message_ == nullptr) {
    auto* p = CreateMaybeMessage<::protos::InnerMessage>(GetArenaForAllocation());
    _impl_.inner_message_ = p;
  }
  return _impl_.inner_message_;
}
inline ::protos::InnerMessage* CommonMessage::mutable_inner_message() {
  ::protos::InnerMessage* _msg = _internal_mutable_inner_message();
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.inner_message)
  return _msg;
}
inline void CommonMessage::set_allocated_inner_message(::protos::InnerMessage* inner_message) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.inner_message_;
  }
  if (inner_message) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(inner_message);
    if (message_arena != submessage_arena) {
      inner_message = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, inner_message, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.inner_message_ = inner_message;
  // @@protoc_insertion_point(field_set_allocated:protos.CommonMessage.inner_message)
}

// string my_string_field = 8;
inline bool CommonMessage::_internal_has_my_string_field() const {
  return my_field_case() == kMyStringField;
}
inline bool CommonMessage::has_my_string_field() const {
  return _internal_has_my_string_field();
}
inline void CommonMessage::set_has_my_string_field() {
  _impl_._oneof_case_[0] = kMyStringField;
}
inline void CommonMessage::clear_my_string_field() {
  if (_internal_has_my_string_field()) {
    _impl_.my_field_.my_string_field_.Destroy();
    clear_has_my_field();
  }
}
inline const std::string& CommonMessage::my_string_field() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_string_field)
  return _internal_my_string_field();
}
template <typename ArgT0, typename... ArgT>
inline void CommonMessage::set_my_string_field(ArgT0&& arg0, ArgT... args) {
  if (!_internal_has_my_string_field()) {
    clear_my_field();
    set_has_my_string_field();
    _impl_.my_field_.my_string_field_.InitDefault();
  }
  _impl_.my_field_.my_string_field_.Set( static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_string_field)
}
inline std::string* CommonMessage::mutable_my_string_field() {
  std::string* _s = _internal_mutable_my_string_field();
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.my_string_field)
  return _s;
}
inline const std::string& CommonMessage::_internal_my_string_field() const {
  if (_internal_has_my_string_field()) {
    return _impl_.my_field_.my_string_field_.Get();
  }
  return ::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited();
}
inline void CommonMessage::_internal_set_my_string_field(const std::string& value) {
  if (!_internal_has_my_string_field()) {
    clear_my_field();
    set_has_my_string_field();
    _impl_.my_field_.my_string_field_.InitDefault();
  }
  _impl_.my_field_.my_string_field_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonMessage::_internal_mutable_my_string_field() {
  if (!_internal_has_my_string_field()) {
    clear_my_field();
    set_has_my_string_field();
    _impl_.my_field_.my_string_field_.InitDefault();
  }
  return _impl_.my_field_.my_string_field_.Mutable(      GetArenaForAllocation());
}
inline std::string* CommonMessage::release_my_string_field() {
  // @@protoc_insertion_point(field_release:protos.CommonMessage.my_string_field)
  if (_internal_has_my_string_field()) {
    clear_has_my_field();
    return _impl_.my_field_.my_string_field_.Release();
  } else {
    return nullptr;
  }
}
inline void CommonMessage::set_allocated_my_string_field(std::string* my_string_field) {
  if (has_my_field()) {
    clear_my_field();
  }
  if (my_string_field != nullptr) {
    set_has_my_string_field();
    _impl_.my_field_.my_string_field_.InitAllocated(my_string_field, GetArenaForAllocation());
  }
  // @@protoc_insertion_point(field_set_allocated:protos.CommonMessage.my_string_field)
}

// int32 my_int32_field = 9;
inline bool CommonMessage::_internal_has_my_int32_field() const {
  return my_field_case() == kMyInt32Field;
}
inline bool CommonMessage::has_my_int32_field() const {
  return _internal_has_my_int32_field();
}
inline void CommonMessage::set_has_my_int32_field() {
  _impl_._oneof_case_[0] = kMyInt32Field;
}
inline void CommonMessage::clear_my_int32_field() {
  if (_internal_has_my_int32_field()) {
    _impl_.my_field_.my_int32_field_ = 0;
    clear_has_my_field();
  }
}
inline int32_t CommonMessage::_internal_my_int32_field() const {
  if (_internal_has_my_int32_field()) {
    return _impl_.my_field_.my_int32_field_;
  }
  return 0;
}
inline void CommonMessage::_internal_set_my_int32_field(int32_t value) {
  if (!_internal_has_my_int32_field()) {
    clear_my_field();
    set_has_my_int32_field();
  }
  _impl_.my_field_.my_int32_field_ = value;
}
inline int32_t CommonMessage::my_int32_field() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_int32_field)
  return _internal_my_int32_field();
}
inline void CommonMessage::set_my_int32_field(int32_t value) {
  _internal_set_my_int32_field(value);
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_int32_field)
}

// bytes my_bytes = 10;
inline void CommonMessage::clear_my_bytes() {
  _impl_.my_bytes_.ClearToEmpty();
}
inline const std::string& CommonMessage::my_bytes() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_bytes)
  return _internal_my_bytes();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void CommonMessage::set_my_bytes(ArgT0&& arg0, ArgT... args) {
 
 _impl_.my_bytes_.SetBytes(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:protos.CommonMessage.my_bytes)
}
inline std::string* CommonMessage::mutable_my_bytes() {
  std::string* _s = _internal_mutable_my_bytes();
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.my_bytes)
  return _s;
}
inline const std::string& CommonMessage::_internal_my_bytes() const {
  return _impl_.my_bytes_.Get();
}
inline void CommonMessage::_internal_set_my_bytes(const std::string& value) {
  
  _impl_.my_bytes_.Set(value, GetArenaForAllocation());
}
inline std::string* CommonMessage::_internal_mutable_my_bytes() {
  
  return _impl_.my_bytes_.Mutable(GetArenaForAllocation());
}
inline std::string* CommonMessage::release_my_bytes() {
  // @@protoc_insertion_point(field_release:protos.CommonMessage.my_bytes)
  return _impl_.my_bytes_.Release();
}
inline void CommonMessage::set_allocated_my_bytes(std::string* my_bytes) {
  if (my_bytes != nullptr) {
    
  } else {
    
  }
  _impl_.my_bytes_.SetAllocated(my_bytes, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.my_bytes_.IsDefault()) {
    _impl_.my_bytes_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:protos.CommonMessage.my_bytes)
}

// map<string, int32> my_map = 11;
inline int CommonMessage::_internal_my_map_size() const {
  return _impl_.my_map_.size();
}
inline int CommonMessage::my_map_size() const {
  return _internal_my_map_size();
}
inline void CommonMessage::clear_my_map() {
  _impl_.my_map_.Clear();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CommonMessage::_internal_my_map() const {
  return _impl_.my_map_.GetMap();
}
inline const ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >&
CommonMessage::my_map() const {
  // @@protoc_insertion_point(field_map:protos.CommonMessage.my_map)
  return _internal_my_map();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CommonMessage::_internal_mutable_my_map() {
  return _impl_.my_map_.MutableMap();
}
inline ::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >*
CommonMessage::mutable_my_map() {
  // @@protoc_insertion_point(field_mutable_map:protos.CommonMessage.my_map)
  return _internal_mutable_my_map();
}

// .google.protobuf.Timestamp my_timestamp = 12;
inline bool CommonMessage::_internal_has_my_timestamp() const {
  return this != internal_default_instance() && _impl_.my_timestamp_ != nullptr;
}
inline bool CommonMessage::has_my_timestamp() const {
  return _internal_has_my_timestamp();
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CommonMessage::_internal_my_timestamp() const {
  const ::PROTOBUF_NAMESPACE_ID::Timestamp* p = _impl_.my_timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Timestamp&>(
      ::PROTOBUF_NAMESPACE_ID::_Timestamp_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Timestamp& CommonMessage::my_timestamp() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_timestamp)
  return _internal_my_timestamp();
}
inline void CommonMessage::unsafe_arena_set_allocated_my_timestamp(
    ::PROTOBUF_NAMESPACE_ID::Timestamp* my_timestamp) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_timestamp_);
  }
  _impl_.my_timestamp_ = my_timestamp;
  if (my_timestamp) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.CommonMessage.my_timestamp)
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommonMessage::release_my_timestamp() {
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.my_timestamp_;
  _impl_.my_timestamp_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommonMessage::unsafe_arena_release_my_timestamp() {
  // @@protoc_insertion_point(field_release:protos.CommonMessage.my_timestamp)
  
  ::PROTOBUF_NAMESPACE_ID::Timestamp* temp = _impl_.my_timestamp_;
  _impl_.my_timestamp_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommonMessage::_internal_mutable_my_timestamp() {
  
  if (_impl_.my_timestamp_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Timestamp>(GetArenaForAllocation());
    _impl_.my_timestamp_ = p;
  }
  return _impl_.my_timestamp_;
}
inline ::PROTOBUF_NAMESPACE_ID::Timestamp* CommonMessage::mutable_my_timestamp() {
  ::PROTOBUF_NAMESPACE_ID::Timestamp* _msg = _internal_mutable_my_timestamp();
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.my_timestamp)
  return _msg;
}
inline void CommonMessage::set_allocated_my_timestamp(::PROTOBUF_NAMESPACE_ID::Timestamp* my_timestamp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_timestamp_);
  }
  if (my_timestamp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(my_timestamp));
    if (message_arena != submessage_arena) {
      my_timestamp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_timestamp, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.my_timestamp_ = my_timestamp;
  // @@protoc_insertion_point(field_set_allocated:protos.CommonMessage.my_timestamp)
}

// .google.protobuf.Any my_any = 13;
inline bool CommonMessage::_internal_has_my_any() const {
  return this != internal_default_instance() && _impl_.my_any_ != nullptr;
}
inline bool CommonMessage::has_my_any() const {
  return _internal_has_my_any();
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CommonMessage::_internal_my_any() const {
  const ::PROTOBUF_NAMESPACE_ID::Any* p = _impl_.my_any_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Any&>(
      ::PROTOBUF_NAMESPACE_ID::_Any_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Any& CommonMessage::my_any() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_any)
  return _internal_my_any();
}
inline void CommonMessage::unsafe_arena_set_allocated_my_any(
    ::PROTOBUF_NAMESPACE_ID::Any* my_any) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_any_);
  }
  _impl_.my_any_ = my_any;
  if (my_any) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.CommonMessage.my_any)
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CommonMessage::release_my_any() {
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.my_any_;
  _impl_.my_any_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CommonMessage::unsafe_arena_release_my_any() {
  // @@protoc_insertion_point(field_release:protos.CommonMessage.my_any)
  
  ::PROTOBUF_NAMESPACE_ID::Any* temp = _impl_.my_any_;
  _impl_.my_any_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CommonMessage::_internal_mutable_my_any() {
  
  if (_impl_.my_any_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Any>(GetArenaForAllocation());
    _impl_.my_any_ = p;
  }
  return _impl_.my_any_;
}
inline ::PROTOBUF_NAMESPACE_ID::Any* CommonMessage::mutable_my_any() {
  ::PROTOBUF_NAMESPACE_ID::Any* _msg = _internal_mutable_my_any();
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.my_any)
  return _msg;
}
inline void CommonMessage::set_allocated_my_any(::PROTOBUF_NAMESPACE_ID::Any* my_any) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_any_);
  }
  if (my_any) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(my_any));
    if (message_arena != submessage_arena) {
      my_any = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_any, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.my_any_ = my_any;
  // @@protoc_insertion_point(field_set_allocated:protos.CommonMessage.my_any)
}

// .google.protobuf.Duration my_duration = 14;
inline bool CommonMessage::_internal_has_my_duration() const {
  return this != internal_default_instance() && _impl_.my_duration_ != nullptr;
}
inline bool CommonMessage::has_my_duration() const {
  return _internal_has_my_duration();
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CommonMessage::_internal_my_duration() const {
  const ::PROTOBUF_NAMESPACE_ID::Duration* p = _impl_.my_duration_;
  return p != nullptr ? *p : reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Duration&>(
      ::PROTOBUF_NAMESPACE_ID::_Duration_default_instance_);
}
inline const ::PROTOBUF_NAMESPACE_ID::Duration& CommonMessage::my_duration() const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.my_duration)
  return _internal_my_duration();
}
inline void CommonMessage::unsafe_arena_set_allocated_my_duration(
    ::PROTOBUF_NAMESPACE_ID::Duration* my_duration) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_duration_);
  }
  _impl_.my_duration_ = my_duration;
  if (my_duration) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:protos.CommonMessage.my_duration)
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CommonMessage::release_my_duration() {
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.my_duration_;
  _impl_.my_duration_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CommonMessage::unsafe_arena_release_my_duration() {
  // @@protoc_insertion_point(field_release:protos.CommonMessage.my_duration)
  
  ::PROTOBUF_NAMESPACE_ID::Duration* temp = _impl_.my_duration_;
  _impl_.my_duration_ = nullptr;
  return temp;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CommonMessage::_internal_mutable_my_duration() {
  
  if (_impl_.my_duration_ == nullptr) {
    auto* p = CreateMaybeMessage<::PROTOBUF_NAMESPACE_ID::Duration>(GetArenaForAllocation());
    _impl_.my_duration_ = p;
  }
  return _impl_.my_duration_;
}
inline ::PROTOBUF_NAMESPACE_ID::Duration* CommonMessage::mutable_my_duration() {
  ::PROTOBUF_NAMESPACE_ID::Duration* _msg = _internal_mutable_my_duration();
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.my_duration)
  return _msg;
}
inline void CommonMessage::set_allocated_my_duration(::PROTOBUF_NAMESPACE_ID::Duration* my_duration) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.my_duration_);
  }
  if (my_duration) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(my_duration));
    if (message_arena != submessage_arena) {
      my_duration = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, my_duration, submessage_arena);
    }
    
  } else {
    
  }
  _impl_.my_duration_ = my_duration;
  // @@protoc_insertion_point(field_set_allocated:protos.CommonMessage.my_duration)
}

// repeated string call_stack = 15;
inline int CommonMessage::_internal_call_stack_size() const {
  return _impl_.call_stack_.size();
}
inline int CommonMessage::call_stack_size() const {
  return _internal_call_stack_size();
}
inline void CommonMessage::clear_call_stack() {
  _impl_.call_stack_.Clear();
}
inline std::string* CommonMessage::add_call_stack() {
  std::string* _s = _internal_add_call_stack();
  // @@protoc_insertion_point(field_add_mutable:protos.CommonMessage.call_stack)
  return _s;
}
inline const std::string& CommonMessage::_internal_call_stack(int index) const {
  return _impl_.call_stack_.Get(index);
}
inline const std::string& CommonMessage::call_stack(int index) const {
  // @@protoc_insertion_point(field_get:protos.CommonMessage.call_stack)
  return _internal_call_stack(index);
}
inline std::string* CommonMessage::mutable_call_stack(int index) {
  // @@protoc_insertion_point(field_mutable:protos.CommonMessage.call_stack)
  return _impl_.call_stack_.Mutable(index);
}
inline void CommonMessage::set_call_stack(int index, const std::string& value) {
  _impl_.call_stack_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:protos.CommonMessage.call_stack)
}
inline void CommonMessage::set_call_stack(int index, std::string&& value) {
  _impl_.call_stack_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:protos.CommonMessage.call_stack)
}
inline void CommonMessage::set_call_stack(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.call_stack_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:protos.CommonMessage.call_stack)
}
inline void CommonMessage::set_call_stack(int index, const char* value, size_t size) {
  _impl_.call_stack_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:protos.CommonMessage.call_stack)
}
inline std::string* CommonMessage::_internal_add_call_stack() {
  return _impl_.call_stack_.Add();
}
inline void CommonMessage::add_call_stack(const std::string& value) {
  _impl_.call_stack_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:protos.CommonMessage.call_stack)
}
inline void CommonMessage::add_call_stack(std::string&& value) {
  _impl_.call_stack_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:protos.CommonMessage.call_stack)
}
inline void CommonMessage::add_call_stack(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  _impl_.call_stack_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:protos.CommonMessage.call_stack)
}
inline void CommonMessage::add_call_stack(const char* value, size_t size) {
  _impl_.call_stack_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:protos.CommonMessage.call_stack)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
CommonMessage::call_stack() const {
  // @@protoc_insertion_point(field_list:protos.CommonMessage.call_stack)
  return _impl_.call_stack_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
CommonMessage::mutable_call_stack() {
  // @@protoc_insertion_point(field_mutable_list:protos.CommonMessage.call_stack)
  return &_impl_.call_stack_;
}

inline bool CommonMessage::has_my_field() const {
  return my_field_case() != MY_FIELD_NOT_SET;
}
inline void CommonMessage::clear_has_my_field() {
  _impl_._oneof_case_[0] = MY_FIELD_NOT_SET;
}
inline CommonMessage::MyFieldCase CommonMessage::my_field_case() const {
  return CommonMessage::MyFieldCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace protos

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::protos::MyEnum> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::protos::MyEnum>() {
  return ::protos::MyEnum_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_protos_2fmessage_2eproto
