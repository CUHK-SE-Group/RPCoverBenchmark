// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: protos/message.proto

#include "protos/message.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

namespace protos {
PROTOBUF_CONSTEXPR InnerMessage::InnerMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.inner_value_)*/0
  , /*decltype(_impl_._cached_size_)*/{}} {}
struct InnerMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InnerMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~InnerMessageDefaultTypeInternal() {}
  union {
    InnerMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InnerMessageDefaultTypeInternal _InnerMessage_default_instance_;
PROTOBUF_CONSTEXPR CommonMessage_MyMapEntry_DoNotUse::CommonMessage_MyMapEntry_DoNotUse(
    ::_pbi::ConstantInitialized) {}
struct CommonMessage_MyMapEntry_DoNotUseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonMessage_MyMapEntry_DoNotUseDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonMessage_MyMapEntry_DoNotUseDefaultTypeInternal() {}
  union {
    CommonMessage_MyMapEntry_DoNotUse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonMessage_MyMapEntry_DoNotUseDefaultTypeInternal _CommonMessage_MyMapEntry_DoNotUse_default_instance_;
PROTOBUF_CONSTEXPR CommonMessage::CommonMessage(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_.my_numbers_)*/{}
  , /*decltype(_impl_._my_numbers_cached_byte_size_)*/{0}
  , /*decltype(_impl_.my_map_)*/{::_pbi::ConstantInitialized()}
  , /*decltype(_impl_.call_stack_)*/{}
  , /*decltype(_impl_.my_string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.my_bytes_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.inner_message_)*/nullptr
  , /*decltype(_impl_.my_timestamp_)*/nullptr
  , /*decltype(_impl_.my_any_)*/nullptr
  , /*decltype(_impl_.my_duration_)*/nullptr
  , /*decltype(_impl_.my_int32_)*/0
  , /*decltype(_impl_.my_float_)*/0
  , /*decltype(_impl_.my_bool_)*/false
  , /*decltype(_impl_.my_enum_)*/0
  , /*decltype(_impl_.my_field_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_._oneof_case_)*/{}} {}
struct CommonMessageDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CommonMessageDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~CommonMessageDefaultTypeInternal() {}
  union {
    CommonMessage _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CommonMessageDefaultTypeInternal _CommonMessage_default_instance_;
}  // namespace protos
static ::_pb::Metadata file_level_metadata_protos_2fmessage_2eproto[3];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_protos_2fmessage_2eproto[1];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_protos_2fmessage_2eproto = nullptr;

const uint32_t TableStruct_protos_2fmessage_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::InnerMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protos::InnerMessage, _impl_.inner_value_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage_MyMapEntry_DoNotUse, _has_bits_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage_MyMapEntry_DoNotUse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage_MyMapEntry_DoNotUse, key_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage_MyMapEntry_DoNotUse, value_),
  0,
  1,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_._oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_string_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_int32_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_float_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_bool_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_enum_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_numbers_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.inner_message_),
  ::_pbi::kInvalidFieldOffsetTag,
  ::_pbi::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_bytes_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_map_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_timestamp_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_any_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_duration_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.call_stack_),
  PROTOBUF_FIELD_OFFSET(::protos::CommonMessage, _impl_.my_field_),
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::protos::InnerMessage)},
  { 7, 15, -1, sizeof(::protos::CommonMessage_MyMapEntry_DoNotUse)},
  { 17, -1, -1, sizeof(::protos::CommonMessage)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::protos::_InnerMessage_default_instance_._instance,
  &::protos::_CommonMessage_MyMapEntry_DoNotUse_default_instance_._instance,
  &::protos::_CommonMessage_default_instance_._instance,
};

const char descriptor_table_protodef_protos_2fmessage_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\024protos/message.proto\022\006protos\032\037google/p"
  "rotobuf/timestamp.proto\032\031google/protobuf"
  "/any.proto\032\036google/protobuf/duration.pro"
  "to\"#\n\014InnerMessage\022\023\n\013inner_value\030\001 \001(\005\""
  "\210\004\n\rCommonMessage\022\021\n\tmy_string\030\001 \001(\t\022\020\n\010"
  "my_int32\030\002 \001(\005\022\020\n\010my_float\030\003 \001(\002\022\017\n\007my_b"
  "ool\030\004 \001(\010\022\037\n\007my_enum\030\005 \001(\0162\016.protos.MyEn"
  "um\022\022\n\nmy_numbers\030\006 \003(\005\022+\n\rinner_message\030"
  "\007 \001(\0132\024.protos.InnerMessage\022\031\n\017my_string"
  "_field\030\010 \001(\tH\000\022\030\n\016my_int32_field\030\t \001(\005H\000"
  "\022\020\n\010my_bytes\030\n \001(\014\0220\n\006my_map\030\013 \003(\0132 .pro"
  "tos.CommonMessage.MyMapEntry\0220\n\014my_times"
  "tamp\030\014 \001(\0132\032.google.protobuf.Timestamp\022$"
  "\n\006my_any\030\r \001(\0132\024.google.protobuf.Any\022.\n\013"
  "my_duration\030\016 \001(\0132\031.google.protobuf.Dura"
  "tion\022\022\n\ncall_stack\030\017 \003(\t\032,\n\nMyMapEntry\022\013"
  "\n\003key\030\001 \001(\t\022\r\n\005value\030\002 \001(\005:\0028\001B\n\n\010my_fie"
  "ld*>\n\006MyEnum\022\020\n\014ENUM_VALUE_1\020\000\022\020\n\014ENUM_V"
  "ALUE_2\020\001\022\020\n\014ENUM_VALUE_3\020\002B\tZ\007./protob\006p"
  "roto3"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_protos_2fmessage_2eproto_deps[3] = {
  &::descriptor_table_google_2fprotobuf_2fany_2eproto,
  &::descriptor_table_google_2fprotobuf_2fduration_2eproto,
  &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::_pbi::once_flag descriptor_table_protos_2fmessage_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_protos_2fmessage_2eproto = {
    false, false, 765, descriptor_table_protodef_protos_2fmessage_2eproto,
    "protos/message.proto",
    &descriptor_table_protos_2fmessage_2eproto_once, descriptor_table_protos_2fmessage_2eproto_deps, 3, 3,
    schemas, file_default_instances, TableStruct_protos_2fmessage_2eproto::offsets,
    file_level_metadata_protos_2fmessage_2eproto, file_level_enum_descriptors_protos_2fmessage_2eproto,
    file_level_service_descriptors_protos_2fmessage_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_protos_2fmessage_2eproto_getter() {
  return &descriptor_table_protos_2fmessage_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_protos_2fmessage_2eproto(&descriptor_table_protos_2fmessage_2eproto);
namespace protos {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MyEnum_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_protos_2fmessage_2eproto);
  return file_level_enum_descriptors_protos_2fmessage_2eproto[0];
}
bool MyEnum_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class InnerMessage::_Internal {
 public:
};

InnerMessage::InnerMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:protos.InnerMessage)
}
InnerMessage::InnerMessage(const InnerMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  InnerMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.inner_value_){}
    , /*decltype(_impl_._cached_size_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.inner_value_ = from._impl_.inner_value_;
  // @@protoc_insertion_point(copy_constructor:protos.InnerMessage)
}

inline void InnerMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.inner_value_){0}
    , /*decltype(_impl_._cached_size_)*/{}
  };
}

InnerMessage::~InnerMessage() {
  // @@protoc_insertion_point(destructor:protos.InnerMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void InnerMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void InnerMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void InnerMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.InnerMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.inner_value_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* InnerMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 inner_value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _impl_.inner_value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* InnerMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.InnerMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 inner_value = 1;
  if (this->_internal_inner_value() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(1, this->_internal_inner_value(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.InnerMessage)
  return target;
}

size_t InnerMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.InnerMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 inner_value = 1;
  if (this->_internal_inner_value() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_inner_value());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData InnerMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    InnerMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*InnerMessage::GetClassData() const { return &_class_data_; }


void InnerMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<InnerMessage*>(&to_msg);
  auto& from = static_cast<const InnerMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.InnerMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_inner_value() != 0) {
    _this->_internal_set_inner_value(from._internal_inner_value());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void InnerMessage::CopyFrom(const InnerMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.InnerMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InnerMessage::IsInitialized() const {
  return true;
}

void InnerMessage::InternalSwap(InnerMessage* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_.inner_value_, other->_impl_.inner_value_);
}

::PROTOBUF_NAMESPACE_ID::Metadata InnerMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmessage_2eproto_getter, &descriptor_table_protos_2fmessage_2eproto_once,
      file_level_metadata_protos_2fmessage_2eproto[0]);
}

// ===================================================================

CommonMessage_MyMapEntry_DoNotUse::CommonMessage_MyMapEntry_DoNotUse() {}
CommonMessage_MyMapEntry_DoNotUse::CommonMessage_MyMapEntry_DoNotUse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
    : SuperType(arena) {}
void CommonMessage_MyMapEntry_DoNotUse::MergeFrom(const CommonMessage_MyMapEntry_DoNotUse& other) {
  MergeFromInternal(other);
}
::PROTOBUF_NAMESPACE_ID::Metadata CommonMessage_MyMapEntry_DoNotUse::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmessage_2eproto_getter, &descriptor_table_protos_2fmessage_2eproto_once,
      file_level_metadata_protos_2fmessage_2eproto[1]);
}

// ===================================================================

class CommonMessage::_Internal {
 public:
  static const ::protos::InnerMessage& inner_message(const CommonMessage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Timestamp& my_timestamp(const CommonMessage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Any& my_any(const CommonMessage* msg);
  static const ::PROTOBUF_NAMESPACE_ID::Duration& my_duration(const CommonMessage* msg);
};

const ::protos::InnerMessage&
CommonMessage::_Internal::inner_message(const CommonMessage* msg) {
  return *msg->_impl_.inner_message_;
}
const ::PROTOBUF_NAMESPACE_ID::Timestamp&
CommonMessage::_Internal::my_timestamp(const CommonMessage* msg) {
  return *msg->_impl_.my_timestamp_;
}
const ::PROTOBUF_NAMESPACE_ID::Any&
CommonMessage::_Internal::my_any(const CommonMessage* msg) {
  return *msg->_impl_.my_any_;
}
const ::PROTOBUF_NAMESPACE_ID::Duration&
CommonMessage::_Internal::my_duration(const CommonMessage* msg) {
  return *msg->_impl_.my_duration_;
}
void CommonMessage::clear_my_timestamp() {
  if (GetArenaForAllocation() == nullptr && _impl_.my_timestamp_ != nullptr) {
    delete _impl_.my_timestamp_;
  }
  _impl_.my_timestamp_ = nullptr;
}
void CommonMessage::clear_my_any() {
  if (GetArenaForAllocation() == nullptr && _impl_.my_any_ != nullptr) {
    delete _impl_.my_any_;
  }
  _impl_.my_any_ = nullptr;
}
void CommonMessage::clear_my_duration() {
  if (GetArenaForAllocation() == nullptr && _impl_.my_duration_ != nullptr) {
    delete _impl_.my_duration_;
  }
  _impl_.my_duration_ = nullptr;
}
CommonMessage::CommonMessage(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  if (arena != nullptr && !is_message_owned) {
    arena->OwnCustomDestructor(this, &CommonMessage::ArenaDtor);
  }
  // @@protoc_insertion_point(arena_constructor:protos.CommonMessage)
}
CommonMessage::CommonMessage(const CommonMessage& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  CommonMessage* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_.my_numbers_){from._impl_.my_numbers_}
    , /*decltype(_impl_._my_numbers_cached_byte_size_)*/{0}
    , /*decltype(_impl_.my_map_)*/{}
    , decltype(_impl_.call_stack_){from._impl_.call_stack_}
    , decltype(_impl_.my_string_){}
    , decltype(_impl_.my_bytes_){}
    , decltype(_impl_.inner_message_){nullptr}
    , decltype(_impl_.my_timestamp_){nullptr}
    , decltype(_impl_.my_any_){nullptr}
    , decltype(_impl_.my_duration_){nullptr}
    , decltype(_impl_.my_int32_){}
    , decltype(_impl_.my_float_){}
    , decltype(_impl_.my_bool_){}
    , decltype(_impl_.my_enum_){}
    , decltype(_impl_.my_field_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.my_map_.MergeFrom(from._impl_.my_map_);
  _impl_.my_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.my_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_string().empty()) {
    _this->_impl_.my_string_.Set(from._internal_my_string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.my_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.my_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_my_bytes().empty()) {
    _this->_impl_.my_bytes_.Set(from._internal_my_bytes(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_inner_message()) {
    _this->_impl_.inner_message_ = new ::protos::InnerMessage(*from._impl_.inner_message_);
  }
  if (from._internal_has_my_timestamp()) {
    _this->_impl_.my_timestamp_ = new ::PROTOBUF_NAMESPACE_ID::Timestamp(*from._impl_.my_timestamp_);
  }
  if (from._internal_has_my_any()) {
    _this->_impl_.my_any_ = new ::PROTOBUF_NAMESPACE_ID::Any(*from._impl_.my_any_);
  }
  if (from._internal_has_my_duration()) {
    _this->_impl_.my_duration_ = new ::PROTOBUF_NAMESPACE_ID::Duration(*from._impl_.my_duration_);
  }
  ::memcpy(&_impl_.my_int32_, &from._impl_.my_int32_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.my_enum_) -
    reinterpret_cast<char*>(&_impl_.my_int32_)) + sizeof(_impl_.my_enum_));
  clear_has_my_field();
  switch (from.my_field_case()) {
    case kMyStringField: {
      _this->_internal_set_my_string_field(from._internal_my_string_field());
      break;
    }
    case kMyInt32Field: {
      _this->_internal_set_my_int32_field(from._internal_my_int32_field());
      break;
    }
    case MY_FIELD_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:protos.CommonMessage)
}

inline void CommonMessage::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_.my_numbers_){arena}
    , /*decltype(_impl_._my_numbers_cached_byte_size_)*/{0}
    , /*decltype(_impl_.my_map_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_.call_stack_){arena}
    , decltype(_impl_.my_string_){}
    , decltype(_impl_.my_bytes_){}
    , decltype(_impl_.inner_message_){nullptr}
    , decltype(_impl_.my_timestamp_){nullptr}
    , decltype(_impl_.my_any_){nullptr}
    , decltype(_impl_.my_duration_){nullptr}
    , decltype(_impl_.my_int32_){0}
    , decltype(_impl_.my_float_){0}
    , decltype(_impl_.my_bool_){false}
    , decltype(_impl_.my_enum_){0}
    , decltype(_impl_.my_field_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , /*decltype(_impl_._oneof_case_)*/{}
  };
  _impl_.my_string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.my_string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.my_bytes_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.my_bytes_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  clear_has_my_field();
}

CommonMessage::~CommonMessage() {
  // @@protoc_insertion_point(destructor:protos.CommonMessage)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    ArenaDtor(this);
    return;
  }
  SharedDtor();
}

inline void CommonMessage::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.my_numbers_.~RepeatedField();
  _impl_.my_map_.Destruct();
  _impl_.my_map_.~MapField();
  _impl_.call_stack_.~RepeatedPtrField();
  _impl_.my_string_.Destroy();
  _impl_.my_bytes_.Destroy();
  if (this != internal_default_instance()) delete _impl_.inner_message_;
  if (this != internal_default_instance()) delete _impl_.my_timestamp_;
  if (this != internal_default_instance()) delete _impl_.my_any_;
  if (this != internal_default_instance()) delete _impl_.my_duration_;
  if (has_my_field()) {
    clear_my_field();
  }
}

void CommonMessage::ArenaDtor(void* object) {
  CommonMessage* _this = reinterpret_cast< CommonMessage* >(object);
  _this->_impl_.my_map_.Destruct();
}
void CommonMessage::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void CommonMessage::clear_my_field() {
// @@protoc_insertion_point(one_of_clear_start:protos.CommonMessage)
  switch (my_field_case()) {
    case kMyStringField: {
      _impl_.my_field_.my_string_field_.Destroy();
      break;
    }
    case kMyInt32Field: {
      // No need to clear
      break;
    }
    case MY_FIELD_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = MY_FIELD_NOT_SET;
}


void CommonMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:protos.CommonMessage)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.my_numbers_.Clear();
  _impl_.my_map_.Clear();
  _impl_.call_stack_.Clear();
  _impl_.my_string_.ClearToEmpty();
  _impl_.my_bytes_.ClearToEmpty();
  if (GetArenaForAllocation() == nullptr && _impl_.inner_message_ != nullptr) {
    delete _impl_.inner_message_;
  }
  _impl_.inner_message_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.my_timestamp_ != nullptr) {
    delete _impl_.my_timestamp_;
  }
  _impl_.my_timestamp_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.my_any_ != nullptr) {
    delete _impl_.my_any_;
  }
  _impl_.my_any_ = nullptr;
  if (GetArenaForAllocation() == nullptr && _impl_.my_duration_ != nullptr) {
    delete _impl_.my_duration_;
  }
  _impl_.my_duration_ = nullptr;
  ::memset(&_impl_.my_int32_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&_impl_.my_enum_) -
      reinterpret_cast<char*>(&_impl_.my_int32_)) + sizeof(_impl_.my_enum_));
  clear_my_field();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CommonMessage::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string my_string = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_my_string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protos.CommonMessage.my_string"));
        } else
          goto handle_unusual;
        continue;
      // int32 my_int32 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _impl_.my_int32_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // float my_float = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _impl_.my_float_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // bool my_bool = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _impl_.my_bool_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protos.MyEnum my_enum = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_my_enum(static_cast<::protos::MyEnum>(val));
        } else
          goto handle_unusual;
        continue;
      // repeated int32 my_numbers = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_my_numbers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 48) {
          _internal_add_my_numbers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .protos.InnerMessage inner_message = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_inner_message(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string my_string_field = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_my_string_field();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          CHK_(::_pbi::VerifyUTF8(str, "protos.CommonMessage.my_string_field"));
        } else
          goto handle_unusual;
        continue;
      // int32 my_int32_field = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          _internal_set_my_int32_field(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bytes my_bytes = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_my_bytes();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // map<string, int32> my_map = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(&_impl_.my_map_, ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<90>(ptr));
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Timestamp my_timestamp = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 98)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_timestamp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Any my_any = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 106)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_any(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .google.protobuf.Duration my_duration = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          ptr = ctx->ParseMessage(_internal_mutable_my_duration(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string call_stack = 15;
      case 15:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 122)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_call_stack();
            ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(ptr);
            CHK_(::_pbi::VerifyUTF8(str, "protos.CommonMessage.call_stack"));
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<122>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* CommonMessage::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:protos.CommonMessage)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string my_string = 1;
  if (!this->_internal_my_string().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_my_string().data(), static_cast<int>(this->_internal_my_string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.CommonMessage.my_string");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_my_string(), target);
  }

  // int32 my_int32 = 2;
  if (this->_internal_my_int32() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(2, this->_internal_my_int32(), target);
  }

  // float my_float = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_my_float = this->_internal_my_float();
  uint32_t raw_my_float;
  memcpy(&raw_my_float, &tmp_my_float, sizeof(tmp_my_float));
  if (raw_my_float != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_my_float(), target);
  }

  // bool my_bool = 4;
  if (this->_internal_my_bool() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_my_bool(), target);
  }

  // .protos.MyEnum my_enum = 5;
  if (this->_internal_my_enum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      5, this->_internal_my_enum(), target);
  }

  // repeated int32 my_numbers = 6;
  {
    int byte_size = _impl_._my_numbers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          6, _internal_my_numbers(), byte_size, target);
    }
  }

  // .protos.InnerMessage inner_message = 7;
  if (this->_internal_has_inner_message()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::inner_message(this),
        _Internal::inner_message(this).GetCachedSize(), target, stream);
  }

  // string my_string_field = 8;
  if (_internal_has_my_string_field()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_my_string_field().data(), static_cast<int>(this->_internal_my_string_field().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.CommonMessage.my_string_field");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_my_string_field(), target);
  }

  // int32 my_int32_field = 9;
  if (_internal_has_my_int32_field()) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteInt32ToArray(9, this->_internal_my_int32_field(), target);
  }

  // bytes my_bytes = 10;
  if (!this->_internal_my_bytes().empty()) {
    target = stream->WriteBytesMaybeAliased(
        10, this->_internal_my_bytes(), target);
  }

  // map<string, int32> my_map = 11;
  if (!this->_internal_my_map().empty()) {
    using MapType = ::_pb::Map<std::string, int32_t>;
    using WireHelper = CommonMessage_MyMapEntry_DoNotUse::Funcs;
    const auto& map_field = this->_internal_my_map();
    auto check_utf8 = [](const MapType::value_type& entry) {
      (void)entry;
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
        entry.first.data(), static_cast<int>(entry.first.length()),
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
        "protos.CommonMessage.MyMapEntry.key");
    };

    if (stream->IsSerializationDeterministic() && map_field.size() > 1) {
      for (const auto& entry : ::_pbi::MapSorterPtr<MapType>(map_field)) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    } else {
      for (const auto& entry : map_field) {
        target = WireHelper::InternalSerialize(11, entry.first, entry.second, target, stream);
        check_utf8(entry);
      }
    }
  }

  // .google.protobuf.Timestamp my_timestamp = 12;
  if (this->_internal_has_my_timestamp()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(12, _Internal::my_timestamp(this),
        _Internal::my_timestamp(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Any my_any = 13;
  if (this->_internal_has_my_any()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(13, _Internal::my_any(this),
        _Internal::my_any(this).GetCachedSize(), target, stream);
  }

  // .google.protobuf.Duration my_duration = 14;
  if (this->_internal_has_my_duration()) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(14, _Internal::my_duration(this),
        _Internal::my_duration(this).GetCachedSize(), target, stream);
  }

  // repeated string call_stack = 15;
  for (int i = 0, n = this->_internal_call_stack_size(); i < n; i++) {
    const auto& s = this->_internal_call_stack(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "protos.CommonMessage.call_stack");
    target = stream->WriteString(15, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:protos.CommonMessage)
  return target;
}

size_t CommonMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:protos.CommonMessage)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 my_numbers = 6;
  {
    size_t data_size = ::_pbi::WireFormatLite::
      Int32Size(this->_impl_.my_numbers_);
    if (data_size > 0) {
      total_size += 1 +
        ::_pbi::WireFormatLite::Int32Size(static_cast<int32_t>(data_size));
    }
    int cached_size = ::_pbi::ToCachedSize(data_size);
    _impl_._my_numbers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // map<string, int32> my_map = 11;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(this->_internal_my_map_size());
  for (::PROTOBUF_NAMESPACE_ID::Map< std::string, int32_t >::const_iterator
      it = this->_internal_my_map().begin();
      it != this->_internal_my_map().end(); ++it) {
    total_size += CommonMessage_MyMapEntry_DoNotUse::Funcs::ByteSizeLong(it->first, it->second);
  }

  // repeated string call_stack = 15;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(_impl_.call_stack_.size());
  for (int i = 0, n = _impl_.call_stack_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      _impl_.call_stack_.Get(i));
  }

  // string my_string = 1;
  if (!this->_internal_my_string().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_my_string());
  }

  // bytes my_bytes = 10;
  if (!this->_internal_my_bytes().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_my_bytes());
  }

  // .protos.InnerMessage inner_message = 7;
  if (this->_internal_has_inner_message()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.inner_message_);
  }

  // .google.protobuf.Timestamp my_timestamp = 12;
  if (this->_internal_has_my_timestamp()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.my_timestamp_);
  }

  // .google.protobuf.Any my_any = 13;
  if (this->_internal_has_my_any()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.my_any_);
  }

  // .google.protobuf.Duration my_duration = 14;
  if (this->_internal_has_my_duration()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.my_duration_);
  }

  // int32 my_int32 = 2;
  if (this->_internal_my_int32() != 0) {
    total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_my_int32());
  }

  // float my_float = 3;
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_my_float = this->_internal_my_float();
  uint32_t raw_my_float;
  memcpy(&raw_my_float, &tmp_my_float, sizeof(tmp_my_float));
  if (raw_my_float != 0) {
    total_size += 1 + 4;
  }

  // bool my_bool = 4;
  if (this->_internal_my_bool() != 0) {
    total_size += 1 + 1;
  }

  // .protos.MyEnum my_enum = 5;
  if (this->_internal_my_enum() != 0) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_my_enum());
  }

  switch (my_field_case()) {
    // string my_string_field = 8;
    case kMyStringField: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_my_string_field());
      break;
    }
    // int32 my_int32_field = 9;
    case kMyInt32Field: {
      total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(this->_internal_my_int32_field());
      break;
    }
    case MY_FIELD_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData CommonMessage::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    CommonMessage::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*CommonMessage::GetClassData() const { return &_class_data_; }


void CommonMessage::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<CommonMessage*>(&to_msg);
  auto& from = static_cast<const CommonMessage&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:protos.CommonMessage)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.my_numbers_.MergeFrom(from._impl_.my_numbers_);
  _this->_impl_.my_map_.MergeFrom(from._impl_.my_map_);
  _this->_impl_.call_stack_.MergeFrom(from._impl_.call_stack_);
  if (!from._internal_my_string().empty()) {
    _this->_internal_set_my_string(from._internal_my_string());
  }
  if (!from._internal_my_bytes().empty()) {
    _this->_internal_set_my_bytes(from._internal_my_bytes());
  }
  if (from._internal_has_inner_message()) {
    _this->_internal_mutable_inner_message()->::protos::InnerMessage::MergeFrom(
        from._internal_inner_message());
  }
  if (from._internal_has_my_timestamp()) {
    _this->_internal_mutable_my_timestamp()->::PROTOBUF_NAMESPACE_ID::Timestamp::MergeFrom(
        from._internal_my_timestamp());
  }
  if (from._internal_has_my_any()) {
    _this->_internal_mutable_my_any()->::PROTOBUF_NAMESPACE_ID::Any::MergeFrom(
        from._internal_my_any());
  }
  if (from._internal_has_my_duration()) {
    _this->_internal_mutable_my_duration()->::PROTOBUF_NAMESPACE_ID::Duration::MergeFrom(
        from._internal_my_duration());
  }
  if (from._internal_my_int32() != 0) {
    _this->_internal_set_my_int32(from._internal_my_int32());
  }
  static_assert(sizeof(uint32_t) == sizeof(float), "Code assumes uint32_t and float are the same size.");
  float tmp_my_float = from._internal_my_float();
  uint32_t raw_my_float;
  memcpy(&raw_my_float, &tmp_my_float, sizeof(tmp_my_float));
  if (raw_my_float != 0) {
    _this->_internal_set_my_float(from._internal_my_float());
  }
  if (from._internal_my_bool() != 0) {
    _this->_internal_set_my_bool(from._internal_my_bool());
  }
  if (from._internal_my_enum() != 0) {
    _this->_internal_set_my_enum(from._internal_my_enum());
  }
  switch (from.my_field_case()) {
    case kMyStringField: {
      _this->_internal_set_my_string_field(from._internal_my_string_field());
      break;
    }
    case kMyInt32Field: {
      _this->_internal_set_my_int32_field(from._internal_my_int32_field());
      break;
    }
    case MY_FIELD_NOT_SET: {
      break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void CommonMessage::CopyFrom(const CommonMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:protos.CommonMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonMessage::IsInitialized() const {
  return true;
}

void CommonMessage::InternalSwap(CommonMessage* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.my_numbers_.InternalSwap(&other->_impl_.my_numbers_);
  _impl_.my_map_.InternalSwap(&other->_impl_.my_map_);
  _impl_.call_stack_.InternalSwap(&other->_impl_.call_stack_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.my_string_, lhs_arena,
      &other->_impl_.my_string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.my_bytes_, lhs_arena,
      &other->_impl_.my_bytes_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(CommonMessage, _impl_.my_enum_)
      + sizeof(CommonMessage::_impl_.my_enum_)
      - PROTOBUF_FIELD_OFFSET(CommonMessage, _impl_.inner_message_)>(
          reinterpret_cast<char*>(&_impl_.inner_message_),
          reinterpret_cast<char*>(&other->_impl_.inner_message_));
  swap(_impl_.my_field_, other->_impl_.my_field_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata CommonMessage::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_protos_2fmessage_2eproto_getter, &descriptor_table_protos_2fmessage_2eproto_once,
      file_level_metadata_protos_2fmessage_2eproto[2]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace protos
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::protos::InnerMessage*
Arena::CreateMaybeMessage< ::protos::InnerMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protos::InnerMessage >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::CommonMessage_MyMapEntry_DoNotUse*
Arena::CreateMaybeMessage< ::protos::CommonMessage_MyMapEntry_DoNotUse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protos::CommonMessage_MyMapEntry_DoNotUse >(arena);
}
template<> PROTOBUF_NOINLINE ::protos::CommonMessage*
Arena::CreateMaybeMessage< ::protos::CommonMessage >(Arena* arena) {
  return Arena::CreateMessageInternal< ::protos::CommonMessage >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
