// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: protos/Python_A.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Python_AClient is the client API for Python_A service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Python_AClient interface {
	Python_A_1(ctx context.Context, in *CommonMessage, opts ...grpc.CallOption) (*CommonMessage, error)
	Python_A_2(ctx context.Context, in *CommonMessage, opts ...grpc.CallOption) (*CommonMessage, error)
	Python_A_3(ctx context.Context, in *CommonMessage, opts ...grpc.CallOption) (*CommonMessage, error)
}

type python_AClient struct {
	cc grpc.ClientConnInterface
}

func NewPython_AClient(cc grpc.ClientConnInterface) Python_AClient {
	return &python_AClient{cc}
}

func (c *python_AClient) Python_A_1(ctx context.Context, in *CommonMessage, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/protos.Python_A/Python_A_1", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *python_AClient) Python_A_2(ctx context.Context, in *CommonMessage, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/protos.Python_A/Python_A_2", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *python_AClient) Python_A_3(ctx context.Context, in *CommonMessage, opts ...grpc.CallOption) (*CommonMessage, error) {
	out := new(CommonMessage)
	err := c.cc.Invoke(ctx, "/protos.Python_A/Python_A_3", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Python_AServer is the server API for Python_A service.
// All implementations must embed UnimplementedPython_AServer
// for forward compatibility
type Python_AServer interface {
	Python_A_1(context.Context, *CommonMessage) (*CommonMessage, error)
	Python_A_2(context.Context, *CommonMessage) (*CommonMessage, error)
	Python_A_3(context.Context, *CommonMessage) (*CommonMessage, error)
	mustEmbedUnimplementedPython_AServer()
}

// UnimplementedPython_AServer must be embedded to have forward compatible implementations.
type UnimplementedPython_AServer struct {
}

func (UnimplementedPython_AServer) Python_A_1(context.Context, *CommonMessage) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Python_A_1 not implemented")
}
func (UnimplementedPython_AServer) Python_A_2(context.Context, *CommonMessage) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Python_A_2 not implemented")
}
func (UnimplementedPython_AServer) Python_A_3(context.Context, *CommonMessage) (*CommonMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Python_A_3 not implemented")
}
func (UnimplementedPython_AServer) mustEmbedUnimplementedPython_AServer() {}

// UnsafePython_AServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Python_AServer will
// result in compilation errors.
type UnsafePython_AServer interface {
	mustEmbedUnimplementedPython_AServer()
}

func RegisterPython_AServer(s grpc.ServiceRegistrar, srv Python_AServer) {
	s.RegisterService(&Python_A_ServiceDesc, srv)
}

func _Python_A_Python_A_1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Python_AServer).Python_A_1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Python_A/Python_A_1",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Python_AServer).Python_A_1(ctx, req.(*CommonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_A_Python_A_2_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Python_AServer).Python_A_2(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Python_A/Python_A_2",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Python_AServer).Python_A_2(ctx, req.(*CommonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Python_A_Python_A_3_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CommonMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Python_AServer).Python_A_3(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/protos.Python_A/Python_A_3",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Python_AServer).Python_A_3(ctx, req.(*CommonMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// Python_A_ServiceDesc is the grpc.ServiceDesc for Python_A service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Python_A_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "protos.Python_A",
	HandlerType: (*Python_AServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Python_A_1",
			Handler:    _Python_A_Python_A_1_Handler,
		},
		{
			MethodName: "Python_A_2",
			Handler:    _Python_A_Python_A_2_Handler,
		},
		{
			MethodName: "Python_A_3",
			Handler:    _Python_A_Python_A_3_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protos/Python_A.proto",
}
